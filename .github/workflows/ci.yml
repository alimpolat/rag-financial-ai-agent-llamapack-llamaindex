name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests (if available)
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success() || failure()
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir ~/.cache/pip -r server/requirements.txt
          pip install --cache-dir ~/.cache/pip pytest pytest-cov pytest-asyncio

      - name: Run Python linting
        run: |
          pip install --cache-dir ~/.cache/pip flake8 black isort mypy
          flake8 server/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check server/
          isort --check-only server/

      - name: Run Python tests (if available)
        run: |
          pytest server/tests/ --cov=server --cov-report=xml --cov-report=term-missing || echo "No tests found, continuing..."
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success() || failure()
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Security Scanning
  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t rag-financial-ai-agent:test .

      - name: Test Docker image
        run: |
          docker run --rm rag-financial-ai-agent:test node --version

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rag-financial-ai-agent:test'
          format: 'table'

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Deployment completed for RAG Financial AI Agent'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
